name: Reusable stacker build
on:
  workflow_call:
    inputs:
      go-version:
        required: true
        type: string
        description: 'Stringified JSON object listing go versions'
      privilege-level:
        required: true
        type: string
        description: 'Stringified JSON object listing stacker privilege-level'
      build-id:
        required: true
        type: string
        description: 'Stringified JSON object listing stacker build-id'
jobs:
  build:
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        go-version: ${{fromJson(inputs.go-version)}}
        privilege-level: ${{fromJson(inputs.privilege-level)}}
        build-id: ${{fromJson(inputs.build-id)}}
    name: "golang ${{ matrix.go-version }} privilege ${{ matrix.privilege-level }}"
    steps:
      - uses: actions/checkout@v3
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
      - name: Set up golang ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - name: Setup Environment
        run: |
          gopath=$PWD/.build/gopath
          echo "GOPATH=$gopath" >> $GITHUB_ENV
          echo "GOCACHE=$gopath/gocache" >> $GITHUB_ENV
          echo "PATH=$gopath/bin:$PATH" >> $GITHUB_ENV

          echo "PWD=$PWD"
          cat "$GITHUB_ENV"
      - name: install dependencies
        run: |
          sudo add-apt-repository -y ppa:project-machine/squashfuse
          sudo apt-get update
          sudo apt-get install -yy lxc-utils lxc-dev libacl1-dev jq libcap-dev libseccomp-dev libpam-dev bats parallel libzstd-dev
          GO111MODULE=off go get github.com/opencontainers/umoci/cmd/umoci
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
          sudo apt-get install -yy autoconf automake make autogen autoconf libtool binutils git squashfs-tools libcryptsetup-dev libdevmapper-dev cryptsetup-bin squashfuse
          echo "running kernel is: $(uname -a)"
      - name: Go-download
        run: |
          make go-download
      - name: Build-level1
        run: |
          make show-info
          make stacker-dynamic VERSION_FULL=${{ matrix.build-id }}
      - name: Build
        run: |
          make stacker VERSION_FULL=${{ matrix.build-id }}
        env:
          REGISTRY_URL: localhost:5000
      - name: Test
        run: |
          make check VERSION_FULL=${{ matrix.build-id }} PRIVILEGE_LEVEL=${{ matrix.privilege-level }}
        env:
          REGISTRY_URL: localhost:5000
      - name: Upload code coverage
        uses: codecov/codecov-action@v3
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: stacker
          key: ${{ matrix.build-id }}
  build-arch:
    runs-on: ubuntu-22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        go-version: ${{fromJson(inputs.go-version)}}
        privilege-level: ${{fromJson(inputs.privilege-level)}}
        build-id: ${{fromJson(inputs.build-id)}}
    name: "golang ${{ matrix.go-version }} privilege ${{ matrix.privilege-level }}"
    steps:
      - uses: actions/checkout@v3
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu22.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
            apt-get update
            apt-get install -yy lxc-utils lxc-dev libacl1-dev jq libcap-dev libseccomp-dev libpam-dev bats parallel libzstd-dev

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"

